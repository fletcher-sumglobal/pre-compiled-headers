plugins {
    id 'cpp-application'
}


application {
 
//    source.from project.fileTree(dir: 'src', include: '**/*.cpp')
//    privateHeaders.from project.file('src/hello/headers')

    binaries.whenElementFinalized { binary ->
        if (binary.targetPlatform.operatingSystemFamily.isWindows()) {
 
            def pchTaskName = "preCompileHeader" + binary.name.capitalize()
            def pchTask = project.tasks.register(pchTaskName, CppPreCompiledHeaderCompile) {
                targetPlatform = binary.targetPlatform
                toolChain = binary.toolChain

                objectFileDir = new File(project.buildDir, "pchOut")
                
                includes.from project.file('src/hello/headers')
                source.from project.file('src/hello/headers')                                
            }
            def linkerTask = binary.linkTask.get()
            File pchFile = pchTask.get().getOutputs().getFiles().getAsFileTree().getSingleFile().matching(new PatternSet().include("**/*.pch",));
            linkerTask.source(pchFile)
        }
    }
}

//tasks.withType(CppCompile) {
//    //pchObjects.from project.fileTree(dir: 'pchOut' )
//    //prefixHeaderFile.from project.fileTree(dir: 'pchOut', include:'**/pch.pch' )
//    //includeString = 'pch.h'
//}

