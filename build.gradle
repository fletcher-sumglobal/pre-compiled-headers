import org.gradle.api.file.FileTree
import org.gradle.api.tasks.util.PatternSet

plugins {
    id 'cpp-application'
}


application {
   //source tree for CppCompile
    //source.from project.fileTree(dir: 'src', include: '**/*.cpp')
    //privateHeaders.from project.file('src/hello/headers')
    
    
    binaries.whenElementFinalized { binary ->
        if (binary.targetPlatform.operatingSystemFamily.isWindows()) {
            //Register CppPreCompiledHeaderCompile
            def linkerTask = binary.linkTask.get()
            def resourceTaskName = "preCompileHeader" + binary.name.capitalize()
            def compileResources = project.tasks.register(resourceTaskName, CppPreCompiledHeaderCompile) {
                
                targetPlatform = binary.targetPlatform
                toolChain = binary.toolChain
                includes.from project.file('src/hello/headers')
                source.from project.fileTree(dir: 'src/hello/cpp' )
                
                compilerArgs.addAll toolChain.map { NativeToolChain toolChain ->
                    List<String> compilerSpecificArgs = []
                    if (toolChain instanceof VisualCpp) {
                        compilerSpecificArgs << '/v'
                    }
                    return compilerSpecificArgs
                }
                outputDir = new File(project.buildDir, "pch/${binary.name}")
            }

            //FileTree resourceOutputs = compileResources.get().getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include(["**/*.res","**/*.obj"]));
            //linkerTask.source(resourceOutputs)
        }
    }
}
