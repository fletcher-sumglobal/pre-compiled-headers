import org.gradle.nativeplatform.toolchain.internal.PCHUtils
import com.google.common.collect.Lists

buildscript {
    dependencies {
        classpath 'com.google.guava:guava:23.0'
    }
}

plugins {
    id 'cpp-application'
}

task prefixGen(type: PrefixHeaderGen) {
    header = 'pch.h'
    prefixHeaderFile = project.file('build/tmp/hello/cpp/prefixHeaders/prefix-headers.h') 
}

application {
    
    binaries.whenElementFinalized { binary ->
        if (binary.targetPlatform.operatingSystemFamily.isWindows()) {
 
            def pchTaskName = "preCompileHeader" + binary.name.capitalize()
            def pchTask = project.tasks.register(pchTaskName, CppPreCompiledHeaderCompile) {
                targetPlatform = binary.targetPlatform
                toolChain = binary.toolChain

                objectFileDir = new File(project.buildDir, "pch/${binary.name}")
                macros.put('DLL_EXPORT', null)
                includes.from project.fileTree(dir: 'src/hello')
                source.from prefixGen.prefixHeaderFile
                dependsOn prefixGen
            }
            FileTree resourceOutputs = pchTask.get().getOutputs().getFiles().getAsFileTree().matching(new PatternSet().include("**/*.pch"));
            binary.linkTask.get().source(resourceOutputs)

        }
    }

}

tasks.withType(LinkExecutable) {
    linkerArgs.addAll toolChain.map { NativeToolChain toolChain ->
        List<String> linkerSpecificArgs = []
        if (toolChain instanceof VisualCpp) {
            linkerSpecificArgs << 'user32.lib'
        }
        return linkerSpecificArgs
    }
}

class PrefixHeaderGen extends DefaultTask {

    @OutputFile
    final RegularFileProperty prefixHeaderFile = project.objects.fileProperty()
    
    @Input
    final Property<String> header = project.objects.property(String)

    
    @TaskAction
    void generatePrefixHeaderFile() {
        PCHUtils.generatePrefixHeaderFile(Lists.newArrayList(header.get()), prefixHeaderFile.getAsFile().get());
    }
}

